@model MiniShoppingCartModel
@using Nop.Web.Models.ShoppingCart;
<div id="flyout-cart" class="flyout-cart">
    <div class="mini-shopping-cart">
        <div class="count">
            @if (Model.TotalProducts == 0)
            {
                <span class="cart-empty">@T("ShoppingCart.Mini.NoItems")</span>
                <div class="flyout-background"></div>
            }
            else
            {
                @*@Html.Raw(string.Format(T("ShoppingCart.Mini.ItemsText").Text, string.Format("<a href=\"{0}\">{1}</a>", Url.RouteUrl("ShoppingCart"), string.Format(T("ShoppingCart.Mini.Items").Text, Model.TotalProducts))))*@
                <div><b>מוצרים בסל הקניות:</b></div>
            }
        </div>
        @if (Model.TotalProducts > 0)
        {
            <div class="items">
                @for (int i = 0; i < Model.Items.Count; i++)
                {
                    var item = Model.Items[i];
                    <div class="item @(i == 0 ? "first" : null)">
                        @if (Model.ShowProductImages)
                        {
                            <div class="picture">
                                <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" title="@item.Picture.Title">
                                    <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                </a>
                            </div>
                        }
                        <div class="product">
                            <div class="name">
                                <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })">@item.ProductName</a>
                            </div>
                            @if (!String.IsNullOrEmpty(item.AttributeInfo))
                            {
                                <div class="attributes">
                                    @Html.Raw(item.AttributeInfo)
                                </div>
                            }
                            <div class="price">@T("ShoppingCart.Mini.UnitPrice"): <span>@item.UnitPrice</span></div>
                            <div class="quantity">@T("ShoppingCart.Mini.Quantity"):
                                <span class="choose-quantity flyout-cart-thing" >
                                        <div class="reduce-quantity" onclick="AjaxCart.reduceQuantityFlyOutCart('flySci-@item.Id','@item.BaseWeight')">
                                            <a>-</a>
                                        </div>
                                        <div class="current-quantity" >
                                            <span id="flySci-@item.Id">@Math.Round(item.Quantity * item.BaseWeight.Value)</span>
                                        </div>
                                        <div class="increase-quantity" onclick="AjaxCart.increaseQuantityFlyOutCart('flySci-@item.Id','@item.BaseWeight')">
                                            <a>+</a>
                                        </div>
                                </span>
    <div class="buttons">
        <input type="button" value="עדכן סל" class="button-1 cart-button" onclick="AjaxCart.pick_flyCart_weight('flySci-@item.Id')" />
    </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="totals">@T("ShoppingCart.Totals.SubTotal"): <strong>@Model.SubTotal</strong></div>
            <div class="buttons">
                @if (Model.DisplayShoppingCartButton)
                {
                    <input type="button" value="@T("ShoppingCart.Mini.ViewCart")" class="button-1 cart-button" onclick="setLocation('@(Url.RouteUrl("ShoppingCart"))')" />

                }
                @if (Model.DisplayCheckoutButton)
                {
                    var checkoutUrl = "";
                    if (Model.AnonymousCheckoutAllowed && Model.CurrentCustomerIsGuest)
                    {
                        checkoutUrl = Url.RouteUrl("LoginCheckoutAsGuest", new { returnUrl = Url.RouteUrl("ShoppingCart") });
                    }
                    else
                    {
                        checkoutUrl = Url.RouteUrl("Checkout");
                    }
                    <input type="button" value="@T("Checkout.Button")" class="button-1 checkout-button" onclick="setLocation('@checkoutUrl')" />
                }
            </div>
        }
    </div>
<div class="flyout-toggle" onclick="flyoutCartToggle()">
    <span>»</span>
</div>
</div>